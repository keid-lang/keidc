
namespace test {
    extern function printf(msg: &char, val: i32)

    class Useless {
        destructor {
            printf("Useless Destructor! %i\n", 77)
        }

        constructor {
            printf("Useless Constructor! %i\n", 77)
        }

        public do_something() {
            printf("I'm doing something with %i!\n", 50)
        }

        public do_something_else() {
            printf("I'm doing something else with %i!\n", 125)
        }
    }

    class Card {
        card_id: i32
        is_valid: i32

        destructor {
            printf("Card Destructor! My Card ID was #%i.\n", this.card_id)
            this.is_valid = 0
        }

        public set_card_id(new_card_id: i32) {
            this.card_id = new_card_id
        }
    }

    class Object {
        field1: i32
        card: Card

        destructor {
            printf("Object Destructor! %i\n", 88)
        }
    }

    class Basic {
        useless: Useless

        destructor {
            printf("Basic Destructor! %i\n", 0)
        }

        constructor {
            printf("Basic Constructor! %i\n", 0)
        }   
    }

    public extern function main(): i32 {
        // let higher_scoped_card = new Card {
        //     card_id = 1,
        //     is_valid = 0,
        // }
        // {
        //     let obj = new Object {
        //         field1 = 2,
        //         card = new Card {
        //             card_id = 5,
        //             is_valid = 0,
        //         },
        //     }
        //     higher_scoped_card = obj.card
        // }

        // printf("Higher scoped card ID: #%i.\n", higher_scoped_card.card_id)
        // printf("Is the higher scoped card still valid? %i.\n", higher_scoped_card.is_valid)

        let range = core::Range::create(10, 20)
        // let rnext = range.next
        // printf("Get item in range: %i.\n", rnext!)
        // printf("Get item in range: %i.\n", range.next!)

        for i in range {
            printf("Next item in range: %i.\n", i)
        }

        return 0
    }
}
